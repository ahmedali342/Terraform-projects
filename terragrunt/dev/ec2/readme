# EC2 Instance Provisioning with Terragrunt (Free Tier)
This project provisions a **free-tier AWS EC2 instance** using Terraform and Terragrunt. It includes SSH key generation, basic networking, and is structured for environment-specific configurations.


## 📁 Directory Structure

Terraform-projects/
├── modules/
│ └── ec2/
│ ├── main.tf
│ ├── variables.tf
│ ├── outputs.tf
├── terragrunt/
│ └── dev/
│ └── ec2/
│ ├── terragrunt.hcl
│ ├── ssh-key/
│ │ ├── key (private key)
│ │ └── key.pub (public key)
│ └── README.md



## ⚙️ Prerequisites

- AWS CLI configured with credentials
- Terraform installed
- Terragrunt installed
- SSH client (e.g., terminal, PuTTY)



## 🚀 Steps Followed
### 1. Create SSH Key Pair

```bash
mkdir -p terragrunt/dev/ec2/ssh-key
ssh-keygen -t rsa -b 4096 -f terragrunt/dev/ec2/ssh-key/key -N ""

This generates:
key: private key
key.pub: public key
Used in Terraform aws_key_pair resource.

2. Create Terraform Module (in modules/ec2/)

main.tf: Defines EC2 instance, key pair, and security group
variables.tf: Input variables (AMI, instance type, environment)
outputs.tf: Outputs public IP and SSH connection command

3. Create Terragrunt Config (terragrunt.hcl)
Located in terragrunt/dev/ec2/:


terraform {
  source = "../../../modules//ec2"
}

inputs = {
  env           = "dev"
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

4. Run Provisioning Commands
From terragrunt/dev/ec2/:

terragrunt init
terragrunt plan
terragrunt apply

🔐 SSH into EC2 Instance
Once deployed:

ssh -i ssh-key/key ec2-user@<public-ip>
Replace <public-ip> with the value from the Terraform output.

🧹 Destroy Resources
To clean up and avoid costs:

terragrunt destroy

📝 Notes
Security group allows SSH from 0.0.0.0/0. In production, restrict this to your IP.
This setup uses t2.micro, eligible for AWS free tier.
No remote state is configured here. You can add remote_state block for backend (e.g., S3) if needed.